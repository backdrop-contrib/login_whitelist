<?php
/**
 * @file login_whitelist.module
 */
define('BAD_REQUEST', 'malformed request, possible cracking attempt!');

/**
 * Implements hook_config_info().
 */
function login_whitelist_config_info() {
  $prefixes['login_whitelist.settings'] = array(
    'label' => t('Login whitelist'),
    'group' => t('Configuration'),
  );
  
  return $prefixes;
}

/**
 * Implements hook_permission().
 *
 */
function login_whitelist_permission() {
  return array(
    'administer login_whitelist settings' => array(
      'title' => t('Administer Login whitelist')
    ),
  );
}

/**
 * Implements hook_menu().
 *
 */
function login_whitelist_menu() {
  $items = array();

  $items['admin/config/people/login_whitelist'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Login whitelist',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('login_whitelist_main_settings_form'),
    'file' => 'login_whitelist.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer login_whitelist settings'),
  );
  
  $items['admin/config/people/login_whitelist/main'] = array(
    'title' => 'Main settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/people/login_whitelist/ua_string'] = array(
    'title' => 'Blocked User Agents',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('login_whitelist_ua_string_form'),
    
    'file' => 'login_whitelist.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer login_whitelist settings'),
    'weight' => 2,
  );

  $items['admin/config/people/login_whitelist/ua_string/unblock/%'] = array(
    'title' => 'Unblock UA string',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('login_whitelist_unblock', 6),
    'access arguments' => array('administer login_whitelist settings'),
    'file' => 'login_whitelist.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 *
 */
function login_whitelist_init() {
  $config      = config('login_whitelist.settings');
  $log_enabled = $config->get('log_enabled');
  $do_reject   = FALSE;

  if (arg(0) == 'user') {
    $ua_string      = isset($_SERVER['HTTP_USER_AGENT']) ? htmlspecialchars($_SERVER['HTTP_USER_AGENT']) : 'Unknown';
    $request_method = $_SERVER['REQUEST_METHOD'];
    
    if (arg(1) == 'register' || arg(1) == 'password') {
      if ($request_method === 'GET' || $request_method === 'POST') {
        if (login_whitelist_bad_ua_listed($ua_string)) {
          $watchdog_message = 'Cracking attempt "' . arg(1) . '", IP: ' . ip_address() . ' rejected for restricted User-Agent: ' . $ua_string;
          $do_reject = TRUE;
        }
      }  
    }
    elseif (arg(1) == 'login' || arg(1) == NULL) {
      if ($request_method === 'GET') {
        if (login_whitelist_bad_ua_listed($ua_string)) {
          $watchdog_message = 'Login attempt rejected for restricted User-Agent: ' . $ua_string . ' from IP: ' . ip_address();
          $do_reject = TRUE;
        }
      }

      if ($request_method === 'POST') {
        $login_name = is_string($_POST['name']) ? htmlspecialchars($_POST['name']) : BAD_REQUEST;
        $login_pass = is_string($_POST['pass']) ? htmlspecialchars($_POST['pass']) : BAD_REQUEST;

        if ($login_name == BAD_REQUEST || !login_whitelist_found($login_name)) {
          $watchdog_message = 'Rejected "' . $login_name . '", IP: ' . ip_address() . ', User-Agent "' . $ua_string . '", password used "' . $login_pass . '"';
          $do_reject = TRUE;
        } 
      }
    }
  }
  
  if ($do_reject) {
    login_whitelist_header();

    if ($log_enabled) {
      watchdog(
        'login_whitelist',
        $watchdog_message,
        NULL,
        WATCHDOG_WARNING
      );
    }

    exit();
  }
} 

/**
 * Check if username whitelisted
 * 
 * @param string $username
 * @return boolean
 */
function login_whitelist_found($username = '') {
  $found       = FALSE;
  $config      = config('login_whitelist.settings');
  $all_users   = $config->get('all_users');
  $whitelisted = array();
  
  if($all_users) {
    $result = db_select('users', 'u')
        ->fields('u', array('name', 'mail'))
        ->condition('status', 1)
        ->execute();
    
    foreach ($result as $login) {
      $whitelisted[] = $login->name;
      $whitelisted[] = $login->mail;
    }
  }
  else {
    $whitelist   = $config->get('whitelist');
    $whitelisted = login_whitelist_textarea_to_array($whitelist);
  }
  
  if (in_array($username, $whitelisted)) {
    $found = TRUE;
  }

  return $found;
} 

function login_whitelist_header() {
  $config      = config('login_whitelist.settings');
  $status_code = $config->get('status_code');

  $status_string = $status_code == '403' ? ' 403 Forbidden' : ' 404 Not found';

  header($_SERVER['SERVER_PROTOCOL'] . $status_string);
}

/**
 * Check if User-Agent string is listed as used by bad robot
 * 
 * @param string $ua_string
 * @return boolean
 */
function login_whitelist_bad_ua_listed($ua_string = '') {
  $found         = FALSE;
  $config        = config('login_whitelist.settings');
  $bad_ua_list   = $config->get('ua_list');

  if (is_array($bad_ua_list) && in_array($ua_string, $bad_ua_list)) {
    $found = TRUE;
  }
  return $found;
} 

/**
 * Utility function
 * @param string $raw_string
 * @return array of strings from textarea
 */
function login_whitelist_textarea_to_array($raw_string = '') {
  $array_of_strings = array();
  
  if (!empty($raw_string)) {
    $raw_array = preg_split("/\\r\\n|\\r|\\n/", $raw_string);
    
    $array_of_strings = array_map('trim', $raw_array);
  }
  return $array_of_strings;
}


